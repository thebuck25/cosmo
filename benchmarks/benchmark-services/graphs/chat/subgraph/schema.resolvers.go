package subgraph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"

	"github.com/google/uuid"
	"github.com/wundergraph/benchmark-services/graphs/chat/subgraph/generated"
	"github.com/wundergraph/benchmark-services/graphs/chat/subgraph/model"
)

// CreateChatRoom is the resolver for the createChatRoom field.
func (r *mutationResolver) CreateChatRoom(ctx context.Context, name string) (*model.ChatRoom, error) {
	chatRoom := r.chatRoomManager.CreateChatRoom(uuid.New().String(), name)
	return chatRoom.GetModel(), nil
}

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, roomID string, senderID string, message string) (*model.ChatMessage, error) {
	chatRoom := r.chatRoomManager.GetOrCreateChatRoom(roomID)
	msg := chatRoom.SendMessage(senderID, message)
	return msg, nil
}

// ChatRooms is the resolver for the chatRooms field.
func (r *queryResolver) ChatRooms(ctx context.Context) ([]*model.ChatRoom, error) {
	return r.chatRoomManager.GetAllChatRooms(), nil
}

// ChatMessages is the resolver for the chatMessages field.
func (r *queryResolver) ChatMessages(ctx context.Context, roomID string) ([]*model.ChatMessage, error) {
	chatRoom := r.chatRoomManager.GetOrCreateChatRoom(roomID)
	return chatRoom.GetMessages(), nil
}

// ChatMessages is the resolver for the chatMessages field.
func (r *subscriptionResolver) ChatMessages(ctx context.Context, roomID string) (<-chan *model.ChatMessage, error) {
	chatRoom := r.chatRoomManager.GetOrCreateChatRoom(roomID)
	return chatRoom.Subscribe(ctx)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
